// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go

// Package mock_dependency is a generated GoMock package.
package mock_dependency

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dependency "github.com/shshimamo/Hands-On-Software-Engineering-with-Golang/ch4test/dependency"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// DependencyType mocks base method.
func (m *MockAPI) DependencyType(dependencyID string) (dependency.DepType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DependencyType", dependencyID)
	ret0, _ := ret[0].(dependency.DepType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DependencyType indicates an expected call of DependencyType.
func (mr *MockAPIMockRecorder) DependencyType(dependencyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependencyType", reflect.TypeOf((*MockAPI)(nil).DependencyType), dependencyID)
}

// ListDependencies mocks base method.
func (m *MockAPI) ListDependencies(projectID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDependencies", projectID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDependencies indicates an expected call of ListDependencies.
func (mr *MockAPIMockRecorder) ListDependencies(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDependencies", reflect.TypeOf((*MockAPI)(nil).ListDependencies), projectID)
}
